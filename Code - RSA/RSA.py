from random import randint,choice
from time import perf_counter

# Données :

# Privées : p, q, d premier avec (p-1)*(q-1)=phi(p*q)
# Publiques : n=p*q, e tel que e*d=1 mod phi(n)

def pgcd(a,b): #algorithme d'Euclide
    while a%b!=0:
        a,b=b,a%b
    return b

def inversmod(a,p):
    '''a**(-1) mod p'''
    #algorithme d'euclide étendu (solution de l'equation de Bezout)
    r1,u1,v1,r2,u2,v2=a,1,0,p,0,1

    while r2!=0:
        q=r1//r2
        r1,u1,v1,r2,u2,v2=r2,u2,v2,r1-q*r2,u1-q*u2,v1-q*v2
    if r1!=1:
        return 'pas inversible'
    else:
        if u1<1:
            while u1<1:
                u1+=p
        if u1>p:
            while u1>p:
                u1-=p
        return u1

def puissmod(a,d,n):
    dbin=bin(d)
    L=[int(dbin[-i-1]) for i in range(len(dbin)-2)]
    res=1
    while L!=[]:
        k=L.pop(0)
        if k>0:
            res=res*a%n
        a=a**2%n
    return res

def MillerRabin_test(n,k): #primalité de n a tester et k nombre de boucles

    for t in range(k):
        a=randint(2,n-2)
        if MillerRabin_temoin(a,n):
            return False
    return True

def MillerRabin_temoin(a,n):
    #Calcul de s et d tels que n-1=2**s*d
    d=(n-1)//2
    s=1
    while d%2==0:
        d=d//2
        s+=1

    #Premier test
    x=puissmod(a,d,n)
    if x==1 or x==n-1 :
        return False

    #Boucle principale

    while s>1:
        x=x**2%n
        if x==n-1:
            return False
        s-=1

    return True

def MillerRabin_generation(b): #longueur en base 10 du nombre premier (proba pas premier 10**-30)
    i=0
    while True:
        i+=1
        n=choice([1,3,5,7,9]) #candidat premier
        for k in range(1,b-1) :
            n+=randint(0,9)*10**k
        n+=randint(1,9)*10**b
        if MillerRabin_test(n,100):
            return i,n

def generateur2(n):
    while True:
        q=MillerRabin_generation(n)[1]
        for k in range(1,500):
            p=k*q+1
            if MillerRabin_test(p,100):
                return p

def RSA_generation(n):
    p=generateur2(n)
    q=generateur2(n) #pas B friable
    phi=(p-1)*(q-1)
    e=3
    while pgcd(e,phi)!=1:
        e+=2
    d=inversmod(e,phi)
    n=p*q
    return n,e,d

def test_RSA_generation(i,j,pas):
    for n in range(i,j,pas):
        T=[]
        for s in range(10):
            t1=perf_counter()
            RSA_generation(n)
            t2=perf_counter()
            T.append(t2-t1)
        print(n,sum(T)/10,sep=';')


def RSA_chiffrement(m,e,n):
    c=puissmod(m,e,n)
    return c

def RSA_dechiffrement(c,d,n):
    m=puissmod(c,d,n)
    return m

def RSA_signature(h,d,n):
    s=puissmod(h,d,n)
    return s

def RSA_verification(s,h,e,n):
    if puissmod(s,e,n)==h:
        return True
    else:
        return False







#Choix p et q à 200 chiffres

def test_RSA(i,j,pas): #taille du message en nombre de caractères
    '''taille;tchif;tdechif;tsign;tverif'''
    global N
    global E
    global D

    for k in range(i,j,pas):
        Tchif=[]
        Tdechif=[]
        Tsign=[]
        Tverif=[]
        for s in range(10):
            n,e,d=N[s],E[s],D[s]
            q=k//166
            r=k-q
            max=sum([2**pui for pui in range(8*r)])
            B_clair=[randint(1,n-1) for i in range(q)]+[randint(1,max)]
            tchif=0
            tdechif=0
            tsign=0
            tverif=0
            for bloc in B_clair:
                t1=perf_counter()
                c=RSA_chiffrement(bloc,d,n)
                t2=perf_counter()
                tchif+=t2-t1

                t1=perf_counter()
                s=RSA_signature(c,d,n)
                t2=perf_counter()
                tsign+=t2-t1

                t1=perf_counter()
                RSA_dechiffrement(c,d,n)
                t2=perf_counter()
                tdechif+=t2-t1

                t1=perf_counter()
                RSA_verification(s,c,e,n)
                t2=perf_counter()
                tverif+=t2-t1
            Tchif.append(tchif)
            Tdechif.append(tdechif)
            Tsign.append(tsign)
            Tverif.append(tverif)


        print(k,sum(Tchif)/10,sum(Tdechif)/10,sum(Tsign)/10,sum(Tverif)/10,sep=';')

N=[10143169132019390948215719225621582658302664876097591344987325520065927649204146189407635872696460478856905584895513299386617862467466252982740186176845740720345369897096455933157460813602226175961668708711238719072810848284194724759879514777464399979920688435288945189735346525930114668648437463016175556924385983577305582185061797316962426317588768356083411035132651115330607398933024139010148820890596561,2424511236337789918316577113857307256147180462179682257254542038193829237891651696648996481281680563591924703711510146189429976049579630638354308075684238272550896549503373898618568489724310509954560272360079798850642614558242155410144525224686161581495520514540066872282315280417193079910614597014819952934165754232955042980309682467949588947863074378711579561700255124385175324999781511084499696125785219,268048067878471710880183204524334587987583160294224653138784527387044957072081070168400193420986281174188447715294208448972782625227497211470617616288701622637568763525952797158600087795089567383673854289948704829672324371331991029817713231150777896782312475044528486537627328920459466112936498119153633969986071361737244748060165779726940126322228251237518968509121512907937754070927638822902775678496199,14752003610609648587420142445358247532801589640269682219974736387328049017392580311160278882950419129906214258083416191976432071133499556208044921170459455078904889762395164550699933372001953703079581531730054819935271481244202457763816146833223101547825988659785615970168307594940993301624234350080785233905773467980801914295203848707417565350995540960116518756442932912322613802553466757157780951959443151,25646591646123572992628973478027837810958335817788751833829784457181319060272786920120372768973095726224047377835536285808846360604846287182539948583819801463555258528037205054136247806853611622390593713000257686243254458351415867977573879515715710006477272341793469925762546098247318341431691815219445108158341835003319778708113198839042944098007989909197483841385204807651346345651297205126951264546896583,663723940107966041377639352382374095516950419258876862738625623594816351445965507137467864479450051891222341632711629695152680495762115841216989673563989213243031348332610975176448673630021572069593830268852949441412841530006343434454033427764103722948564061077440730313515545613763102311713861480951248925153206726703054143947391839174628008288321669474962175766084428094891597130354349398570088953754581,1789237405081047135367211732677155204175433598894781130567498659110006736019891804438736604624075509044383204875307920366579703195413381805503545066536274703096851461259257818539705591870937668229645432106965133570565371053109108685299331456376052973592567226225476729530378295217670673814631253296647267506250249363828701318675864675818095960301139203827734808221635587166627316041382958560336351038788921,4356551277217903666098714233323141239288924775882066670071522914606962928568049714857900805128238250410465099649700883955789287436335767240602358324135227293881006731573363415187913790422228022075287873675511585137007949217789248542303346985431949050869488655092283757031549380332988157974813712534313343589204140143324136030296078021091450103448691239261236767155353225354518002290176960598222853206473021,1008405070699732793999094638495348470682747777694312610234202024741825988019274141198382054229893559545073168394135187363681490063390222741422034206875979382211804022122311465257955351803636687407490058046741992501533450402163616679535677950468548289552375663474453353115923241664206843683634913129507642999782848279975798366248338564570870060961254878561591500101807670288189423791538858187803677261533307,8827149007034913996452580886774578322875179978027242935297445563913847565363822107285401980653253723817603359767282019726621835907997835939994685532023672251888057372424652342419601205232647041577921725728549147892744943277553494380643850749292100877145354437582683218540937481360909536402943681883891666905262760614695280322793939579311099875099798773166214766616893310409090898463077946517398782142498489]

E=[3,3,7,3,5,5,5,5,7,3]

D=[6762112754679593965477146150414388438868443250731727563324883680043951766136097459605090581797640319237937056597008866257745241644977501988493457451230493813563579931397637288771640542401484117307779139005736038994434139103738387943764404630403133892379986916254885768296317581722552192465854197693758987053384437440643478821540273119935185483878803985083272567868969241307767108726215874649731488443879755,1616340824225193278877718075904871504098120308119788171503028025462552825261101131099330987521120375727949802474340097459619984033053087092236205383789492181700597699668915932412378993149540339969706848174283970217101640862806895783987725482042872337882227115802394779292911204123500472633866422524727824579447335115689832755875475623570532491727514065337553206034161340682741039258617665224775995045171227,191462905627479793485845146088810419991130828781589037956274662419317826480057907263142995300704486552991748368067291749266273303733926579621869725920501159026834831089966283684714348425063976702624181592895408965061921973607518391602664182732080050777625709482139770216056373689774178385354432099261276906526227009068897694160297207741046036243591996564429260872352309661654236664131333616381416634963743,9834669073739765724946761630238831688534393093513121479983157591552032678261720207440185921966946086604142838722277461317621380755666370805363280780306303385936593174930109700466622248001302468719721020928591288357725938172584954803143398259987714204717490128154265182111611164003785391081214204981426833411094122507057795686086340721663743354628260818200891506253049024451548217019539513314857010133354315,15387954987674143795577384086816702686575001490673251100297870674308791436163672152072223661383857435734428426701321771485307816362907772309523969150291880878133155116822323032481748684112166973434356227589078829606895679886286870638430550260395666117559086108099837369669399764999918314270890801235541296030351354049610136175867672016053782233504258212377823086024299657059423845672498565647487025371082605,265489576043186416551055740952949638206780167703550745095450249437926540578386202854987145791780020756488936653084651878061072198304846336486795869425595685297212539333044390070579469452008628827837532081801969268007409209819080346623915237951835795601556850421601617633807825882037915003721107691105122643641143376775085448895753328329312548879592556945922181475778826064817268385842460102907137465383373,715694962032418854146884693070862081670173439557912452226999463644002694407956721775494641849630203617753281950123168146631881278165352722201418026614509881238740584503703127415882236748375067291858172799657376739814367095914221899844533298079373973894892758840809417038188225473012520579771274582360086272443035988934665101006831292761092878353722636424873524006787764492410879509087732599453816553154037,1742620510887161466439485693329256495715569910352826668028609165842785171427219885943160322051295300164186039859880353582315714974534306896240943329654090917552402692629345366075165516168891208830115149412830939136182452017321205331741178572381347202843962888122394780351049776701012308438423834704783643935344145357089247828457069310080435797070540105938119173821413449568097265757079318489055097792018765,576231468971275882285196936283056268961570158682464348705258299852471993153870937827646888131367748311470381939505821350675137179080127280812590975357702504121030869784177980147403058173506678518565747393383115919615638809235849512120589773018668670700437558771682300062546772140509442796230110929869540829829895653888679162516677092917517435302113921309953322711742435449202639615379668738012956030347543,5884766004689942664301720591183052215250119985351495290198297042609231710242548071523601320435502482545068906511521346484414557271998557293329790354682448167925371581616434894946400803488431361051947817027093676688292800433145420196601265870374988214570418238798507995506008737268974337823214399464556983499100013013411452984443395791340879056909743241693573416787470411475974427506679282156474490295251883]


test_RSA_generation(10,300,5)
for i in range(10):
    print()
test_RSA(10,500,10)
for i in range(10):
    print()
test_RSA(500,10000,83)

